{"version":3,"sources":["Component/Item.js","Component/API.js","App.js","reportWebVitals.js","index.js"],"names":["Item","props","className","src","image","alt","title","Math","floor","calories","ingredients","map","ingredient","text","Component","useState","items","setItems","search","setSearch","searchResults","setSearchResults","useEffect","componentDidMount","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","value","onChange","target","type","placeholder","item","recipe","label","yeld","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAgBeA,G,KAdF,SAACC,GACZ,OACE,sBAAKC,UAAU,OAAf,UACE,qBAAKC,IAAKF,EAAMG,MAAOC,IAAI,KAC3B,6BAAKJ,EAAMK,QACX,2CAAcC,KAAKC,MAAMP,EAAMQ,aAC/B,6BACGR,EAAMS,YAAYC,KAAI,SAACC,GACtB,OAAO,6BAAKA,EAAWC,iBCmDlBC,EA1DG,WAAO,IAAD,EACIC,mBAAS,IADb,mBACfC,EADe,KACRC,EADQ,OAEMF,mBAAS,IAFf,mBAEfG,EAFe,KAEPC,EAFO,OAGoBJ,mBAAS,IAH7B,mBAGfK,EAHe,KAGAC,EAHA,KAOtBC,qBAAU,WACRC,MACC,CAACH,IAEJ,IAAMG,EAAiB,uCAAG,8BAAAC,EAAA,sEACDC,MAAM,mCAAD,OACSL,EADT,mBANf,WAMe,oBAPd,qCAMU,cAClBM,EADkB,gBAILA,EAASC,OAJJ,OAIlBC,EAJkB,OAKxBX,EAASW,EAAKC,MACdC,QAAQC,IAAIH,EAAKC,MANO,2CAAH,qDAgBvB,OACE,gCACE,uBAAMG,SAPe,SAACC,GACxBA,EAAEC,iBACFb,EAAiBH,IAKmBhB,UAAU,eAA5C,UACE,uBACEiC,MAAOjB,EACPkB,SAba,SAACH,GACpBd,EAAUc,EAAEI,OAAOF,QAabjC,UAAU,cACVoC,KAAK,OACLC,YAAY,cAEd,wBAAQrC,UAAU,iBAAiBoC,KAAK,SAAxC,uBAKF,qBAAKpC,UAAU,YAAf,SACGc,EAAML,KAAI,SAAC6B,GACV,OACE,cAAC,EAAD,CAEElC,MAAOkC,EAAKC,OAAOC,MACnBjC,SAAU+B,EAAKC,OAAOhC,SACtBL,MAAOoC,EAAKC,OAAOrC,MACnBM,YAAa8B,EAAKC,OAAO/B,aAJpB8B,EAAKC,OAAOE,eCtChBC,EARH,WACV,OACE,qBAAK1C,UAAU,MAAf,SACE,cAAC,EAAD,OCMS2C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.b0690724.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./Style.css\";\r\nconst Item = (props) => {\r\n  return (\r\n    <div className=\"Item\">\r\n      <img src={props.image} alt=\"\" />\r\n      <h1>{props.title}</h1>\r\n      <p>Calories: {Math.floor(props.calories)}</p>\r\n      <ul>\r\n        {props.ingredients.map((ingredient) => {\r\n          return <li>{ingredient.text}</li>;\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\nexport default Item;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Item from \"./Item\";\r\nimport \"./Style.css\";\r\nconst Component = () => {\r\n  const [items, setItems] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResults, setSearchResults] = useState(\"\");\r\n\r\n  const APP_KEY = \"63271123c28fde43ada2be31405e4a74\";\r\n  const APP_ID = \"95fa48e6\";\r\n  useEffect(() => {\r\n    componentDidMount();\r\n  }, [searchResults]);\r\n\r\n  const componentDidMount = async () => {\r\n    const response = await fetch(\r\n      `https://api.edamam.com/search?q=${searchResults}&app_id=${APP_ID}&app_key=${APP_KEY}`\r\n    );\r\n    const data = await response.json();\r\n    setItems(data.hits);\r\n    console.log(data.hits);\r\n  };\r\n  const updateSearch = (e) => {\r\n    setSearch(e.target.value);\r\n  };\r\n  const getSearchResults = (e) => {\r\n    e.preventDefault();\r\n    setSearchResults(search);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={getSearchResults} className=\"search--form\">\r\n        <input\r\n          value={search}\r\n          onChange={updateSearch}\r\n          className=\"search--bar\"\r\n          type=\"text\"\r\n          placeholder=\"Search...\"\r\n        />\r\n        <button className=\"search--button\" type=\"submit\">\r\n          Search\r\n        </button>\r\n      </form>\r\n\r\n      <div className=\"Container\">\r\n        {items.map((item) => {\r\n          return (\r\n            <Item\r\n              key={item.recipe.yeld}\r\n              title={item.recipe.label}\r\n              calories={item.recipe.calories}\r\n              image={item.recipe.image}\r\n              ingredients={item.recipe.ingredients}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Component;\r\n","import \"./App.css\";\nimport Component from \"./Component/API\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Component />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}